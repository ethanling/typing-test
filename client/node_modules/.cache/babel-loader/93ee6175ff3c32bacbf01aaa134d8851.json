{"ast":null,"code":"export const initialState = {\n  currentKey: \"\",\n  history: [],\n  test: {\n    name: \"\",\n    text: \"\",\n    // Test text\n    difficulty: 1,\n    // 1 - Easy, 2 - Medium, 3 - Hard\n    duration: 1,\n    wordCount: 0 // in minutes\n\n  },\n  time: {\n    seconds: 0,\n    minutes: 0\n  },\n  matches: [],\n  // Correctly matched test letters to keys pressed\n  isStarted: false,\n  isComplete: false,\n  stats: {\n    wpm: 0,\n    accuracy: ''\n  }\n};\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case \"setCurrentKey\":\n      return { ...state,\n        currentKey: action.newKey\n      };\n\n    case \"addToHistory\":\n      return { ...state,\n        history: [...state.history, action.setHistory]\n      };\n\n    case \"removeLastKey\":\n      return { ...state,\n        history: [...state.history.slice(0, state.history.length - 1)]\n      };\n\n    case \"setMatch\":\n      return { ...state,\n        matches: [...state.matches, action.setMatchBool]\n      };\n\n    case \"removeMatch\":\n      return { ...state,\n        matches: [...state.matches.slice(0, state.matches.length - 1)]\n      };\n\n    case \"setTest\":\n      return { ...state,\n        test: action.testObj\n      };\n\n    case \"setTimer\":\n      return { ...state,\n        time: {\n          seconds: action.setSeconds,\n          minutes: action.setMinutes\n        }\n      };\n\n    case \"startEndTest\":\n      return { ...state,\n        isStarted: action.setStartState\n      };\n\n    case \"completeTest\":\n      return { ...state,\n        isComplete: action.setCompleteTest\n      };\n\n    case \"setStats\":\n      return { ...state,\n        stats: {\n          wpm: action.setWPM,\n          accuracy: action.setAccuracy\n        }\n      };\n\n    case \"reset\":\n      return { ...initialState\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/ethanling/dev/ideations/reducer-typing-test/client/src/reducers/index.js"],"names":["initialState","currentKey","history","test","name","text","difficulty","duration","wordCount","time","seconds","minutes","matches","isStarted","isComplete","stats","wpm","accuracy","reducer","state","action","type","newKey","setHistory","slice","length","setMatchBool","testObj","setSeconds","setMinutes","setStartState","setCompleteTest","setWPM","setAccuracy"],"mappings":"AAAA,OAAO,MAAMA,YAAY,GAAG;AACxBC,EAAAA,UAAU,EAAE,EADY;AAExBC,EAAAA,OAAO,EAAE,EAFe;AAGxBC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,EADJ;AAEFC,IAAAA,IAAI,EAAE,EAFJ;AAEQ;AACVC,IAAAA,UAAU,EAAE,CAHV;AAGa;AACfC,IAAAA,QAAQ,EAAE,CAJR;AAKFC,IAAAA,SAAS,EAAE,CALT,CAKW;;AALX,GAHkB;AAUxBC,EAAAA,IAAI,EAAE;AACFC,IAAAA,OAAO,EAAE,CADP;AAEFC,IAAAA,OAAO,EAAE;AAFP,GAVkB;AAcxBC,EAAAA,OAAO,EAAE,EAde;AAcX;AACbC,EAAAA,SAAS,EAAE,KAfa;AAgBxBC,EAAAA,UAAU,EAAE,KAhBY;AAiBxBC,EAAAA,KAAK,EAAE;AACHC,IAAAA,GAAG,EAAE,CADF;AAEHC,IAAAA,QAAQ,EAAE;AAFP;AAjBiB,CAArB;AAuBP,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,eAAL;AACI,aAAO,EACH,GAAGF,KADA;AAEHlB,QAAAA,UAAU,EAAEmB,MAAM,CAACE;AAFhB,OAAP;;AAIJ,SAAK,cAAL;AACI,aAAO,EACH,GAAGH,KADA;AAEHjB,QAAAA,OAAO,EAAE,CAAC,GAAGiB,KAAK,CAACjB,OAAV,EAAmBkB,MAAM,CAACG,UAA1B;AAFN,OAAP;;AAIJ,SAAK,eAAL;AACI,aAAO,EACH,GAAGJ,KADA;AAEHjB,QAAAA,OAAO,EAAE,CAAC,GAAGiB,KAAK,CAACjB,OAAN,CAAcsB,KAAd,CAAoB,CAApB,EAAuBL,KAAK,CAACjB,OAAN,CAAcuB,MAAd,GAAuB,CAA9C,CAAJ;AAFN,OAAP;;AAIJ,SAAK,UAAL;AACI,aAAO,EACH,GAAGN,KADA;AAEHP,QAAAA,OAAO,EAAE,CAAC,GAAGO,KAAK,CAACP,OAAV,EAAmBQ,MAAM,CAACM,YAA1B;AAFN,OAAP;;AAIJ,SAAK,aAAL;AACI,aAAO,EACH,GAAGP,KADA;AAEHP,QAAAA,OAAO,EAAE,CAAC,GAAGO,KAAK,CAACP,OAAN,CAAcY,KAAd,CAAoB,CAApB,EAAuBL,KAAK,CAACP,OAAN,CAAca,MAAd,GAAuB,CAA9C,CAAJ;AAFN,OAAP;;AAIJ,SAAK,SAAL;AACI,aAAO,EACH,GAAGN,KADA;AAEHhB,QAAAA,IAAI,EAAEiB,MAAM,CAACO;AAFV,OAAP;;AAIJ,SAAK,UAAL;AACI,aAAO,EACH,GAAGR,KADA;AAEHV,QAAAA,IAAI,EAAE;AAAEC,UAAAA,OAAO,EAAEU,MAAM,CAACQ,UAAlB;AAA8BjB,UAAAA,OAAO,EAAES,MAAM,CAACS;AAA9C;AAFH,OAAP;;AAIJ,SAAK,cAAL;AACI,aAAO,EACH,GAAGV,KADA;AAEHN,QAAAA,SAAS,EAAEO,MAAM,CAACU;AAFf,OAAP;;AAIJ,SAAK,cAAL;AACI,aAAO,EACH,GAAGX,KADA;AAEHL,QAAAA,UAAU,EAAEM,MAAM,CAACW;AAFhB,OAAP;;AAIJ,SAAK,UAAL;AACI,aAAO,EACH,GAAGZ,KADA;AAEHJ,QAAAA,KAAK,EAAE;AAAEC,UAAAA,GAAG,EAAEI,MAAM,CAACY,MAAd;AAAsBf,UAAAA,QAAQ,EAAEG,MAAM,CAACa;AAAvC;AAFJ,OAAP;;AAIJ,SAAK,OAAL;AACI,aAAO,EACH,GAAGjC;AADA,OAAP;;AAGJ;AACI,aAAOmB,KAAP;AAxDR;AA0DH,CA3DM","sourcesContent":["export const initialState = {\n    currentKey: \"\",\n    history: [],\n    test: {\n        name: \"\",\n        text: \"\", // Test text\n        difficulty: 1, // 1 - Easy, 2 - Medium, 3 - Hard\n        duration: 1,\n        wordCount: 0 // in minutes\n    },\n    time: {\n        seconds: 0,\n        minutes: 0\n    },\n    matches: [], // Correctly matched test letters to keys pressed\n    isStarted: false,\n    isComplete: false,\n    stats: {\n        wpm: 0,\n        accuracy: ''\n    }\n};\n\nexport const reducer = (state, action) => {\n    switch (action.type) {\n        case \"setCurrentKey\":\n            return {\n                ...state,\n                currentKey: action.newKey\n            };\n        case \"addToHistory\":\n            return {\n                ...state,\n                history: [...state.history, action.setHistory]\n            };\n        case \"removeLastKey\":\n            return {\n                ...state,\n                history: [...state.history.slice(0, state.history.length - 1)]\n            };\n        case \"setMatch\":\n            return {\n                ...state,\n                matches: [...state.matches, action.setMatchBool]\n            };\n        case \"removeMatch\":\n            return {\n                ...state,\n                matches: [...state.matches.slice(0, state.matches.length - 1)]\n            };\n        case \"setTest\":\n            return {\n                ...state,\n                test: action.testObj\n            };\n        case \"setTimer\":\n            return {\n                ...state,\n                time: { seconds: action.setSeconds, minutes: action.setMinutes }\n            };\n        case \"startEndTest\":\n            return {\n                ...state,\n                isStarted: action.setStartState\n            };\n        case \"completeTest\":\n            return {\n                ...state,\n                isComplete: action.setCompleteTest\n            };\n        case \"setStats\":\n            return {\n                ...state,\n                stats: { wpm: action.setWPM, accuracy: action.setAccuracy }\n            }\n        case \"reset\":\n            return {\n                ...initialState\n            };\n        default:\n            return state;\n    }\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/ethanling/dev/ideations/reducer-typing-test/client/src/components/Clock.js\";\nimport React, { useContext } from \"react\";\nimport { StateContext } from \"../context/StateProvider\";\nimport { StyledClockText } from \"../styles/StyledTest\";\nimport { useInterval } from \"../hooks/useInterval\";\n\nconst Clock = () => {\n  const [{\n    time,\n    test,\n    isStarted\n  }, dispatch] = useContext(StateContext);\n\n  const checkTimeAgainstDuration = () => {\n    // Runs dispatch the during the last second, accounts for delay\n    if (time.seconds === test.duration * 60 - 1) {\n      dispatch({\n        type: \"startEndTest\",\n        setStartState: false\n      });\n      dispatch({\n        type: \"completeTest\",\n        setCompleteTest: true\n      });\n    }\n  };\n\n  useInterval(() => {\n    let sec = time.seconds;\n    let min = time.minutes;\n    sec++;\n\n    if (time.seconds === 59) {\n      min++;\n      sec = 0;\n    }\n\n    dispatch({\n      type: \"setTimer\",\n      setSeconds: sec,\n      setMinutes: min\n    });\n    checkTimeAgainstDuration();\n  }, isStarted ? 1000 : null);\n\n  const formatClock = () => {\n    const min = time.minutes;\n    const sec = time.seconds;\n    let displayMinutes;\n    let displaySeconds;\n\n    if (sec < 10) {\n      displaySeconds = `0${sec}`;\n    } else {\n      displaySeconds = `${sec}`;\n    }\n\n    if (min < 10) {\n      displayMinutes = `0${min}`;\n    } else {\n      displayMinutes = `${min}`;\n    }\n\n    return `${displayMinutes}:${displaySeconds} // 0${test.duration}:00`;\n  };\n\n  return React.createElement(StyledClockText, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(\"section\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, formatClock()));\n};\n\nexport default Clock;","map":{"version":3,"sources":["/Users/ethanling/dev/ideations/reducer-typing-test/client/src/components/Clock.js"],"names":["React","useContext","StateContext","StyledClockText","useInterval","Clock","time","test","isStarted","dispatch","checkTimeAgainstDuration","seconds","duration","type","setStartState","setCompleteTest","sec","min","minutes","setSeconds","setMinutes","formatClock","displayMinutes","displaySeconds"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,YAAT,QAA6B,0BAA7B;AACA,SAASC,eAAT,QAAgC,sBAAhC;AACA,SAASC,WAAT,QAA4B,sBAA5B;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAChB,QAAM,CAAC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,IAAR;AAAcC,IAAAA;AAAd,GAAD,EAA4BC,QAA5B,IAAwCR,UAAU,CAACC,YAAD,CAAxD;;AAEA,QAAMQ,wBAAwB,GAAG,MAAM;AACnC;AACA,QAAIJ,IAAI,CAACK,OAAL,KAAkBJ,IAAI,CAACK,QAAL,GAAgB,EAAhB,GAAqB,CAA3C,EAA+C;AAC3CH,MAAAA,QAAQ,CAAC;AAAEI,QAAAA,IAAI,EAAE,cAAR;AAAwBC,QAAAA,aAAa,EAAE;AAAvC,OAAD,CAAR;AACAL,MAAAA,QAAQ,CAAC;AAAEI,QAAAA,IAAI,EAAE,cAAR;AAAwBE,QAAAA,eAAe,EAAE;AAAzC,OAAD,CAAR;AACH;AACJ,GAND;;AAQAX,EAAAA,WAAW,CAAC,MAAM;AACd,QAAIY,GAAG,GAAGV,IAAI,CAACK,OAAf;AACA,QAAIM,GAAG,GAAGX,IAAI,CAACY,OAAf;AAEAF,IAAAA,GAAG;;AAEH,QAAIV,IAAI,CAACK,OAAL,KAAiB,EAArB,EAAyB;AACrBM,MAAAA,GAAG;AACHD,MAAAA,GAAG,GAAG,CAAN;AACH;;AAEDP,IAAAA,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAE,UAAR;AAAoBM,MAAAA,UAAU,EAAEH,GAAhC;AAAqCI,MAAAA,UAAU,EAAEH;AAAjD,KAAD,CAAR;AACAP,IAAAA,wBAAwB;AAE3B,GAdU,EAcRF,SAAS,GAAG,IAAH,GAAU,IAdX,CAAX;;AAgBA,QAAMa,WAAW,GAAG,MAAM;AACtB,UAAMJ,GAAG,GAAGX,IAAI,CAACY,OAAjB;AACA,UAAMF,GAAG,GAAGV,IAAI,CAACK,OAAjB;AAEA,QAAIW,cAAJ;AACA,QAAIC,cAAJ;;AAEA,QAAIP,GAAG,GAAG,EAAV,EAAc;AACVO,MAAAA,cAAc,GAAI,IAAGP,GAAI,EAAzB;AACH,KAFD,MAEO;AACHO,MAAAA,cAAc,GAAI,GAAEP,GAAI,EAAxB;AACH;;AAED,QAAIC,GAAG,GAAG,EAAV,EAAc;AACVK,MAAAA,cAAc,GAAI,IAAGL,GAAI,EAAzB;AACH,KAFD,MAEO;AACHK,MAAAA,cAAc,GAAI,GAAEL,GAAI,EAAxB;AACH;;AAED,WAAQ,GAAEK,cAAe,IAAGC,cAAe,QAAOhB,IAAI,CAACK,QAAS,KAAhE;AACH,GApBD;;AAsBA,SACI,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAUS,WAAW,EAArB,CADJ,CADJ;AAKH,CAtDD;;AAwDA,eAAehB,KAAf","sourcesContent":["import React, { useContext } from \"react\";\nimport { StateContext } from \"../context/StateProvider\";\nimport { StyledClockText } from \"../styles/StyledTest\";\nimport { useInterval } from \"../hooks/useInterval\";\n\nconst Clock = () => {\n    const [{ time, test, isStarted }, dispatch] = useContext(StateContext);\n\n    const checkTimeAgainstDuration = () => {\n        // Runs dispatch the during the last second, accounts for delay\n        if (time.seconds === (test.duration * 60 - 1)) {\n            dispatch({ type: \"startEndTest\", setStartState: false });\n            dispatch({ type: \"completeTest\", setCompleteTest: true });\n        }\n    }\n\n    useInterval(() => {\n        let sec = time.seconds;\n        let min = time.minutes;\n\n        sec++;\n\n        if (time.seconds === 59) {\n            min++;\n            sec = 0;\n        }\n\n        dispatch({ type: \"setTimer\", setSeconds: sec, setMinutes: min });\n        checkTimeAgainstDuration();\n\n    }, isStarted ? 1000 : null);\n\n    const formatClock = () => {\n        const min = time.minutes;\n        const sec = time.seconds;\n\n        let displayMinutes;\n        let displaySeconds;\n\n        if (sec < 10) {\n            displaySeconds = `0${sec}`;\n        } else {\n            displaySeconds = `${sec}`;\n        }\n\n        if (min < 10) {\n            displayMinutes = `0${min}`;\n        } else {\n            displayMinutes = `${min}`;\n        }\n\n        return `${displayMinutes}:${displaySeconds} // 0${test.duration}:00`;\n    };\n\n    return (\n        <StyledClockText>\n            <section>{formatClock()}</section>\n        </StyledClockText>\n    );\n};\n\nexport default Clock;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/ethanling/dev/ideations/reducer-typing-test/client/src/components/StatsDisplay.js\";\nimport React, { useContext, useEffect } from \"react\";\nimport { StateContext } from \"../context/StateProvider\";\nimport { StyledStatsWrapper, StyledStatsHeader } from \"../styles/StyledStats\";\nimport RestartButton from '../components/RestartButton';\n\nconst StatsDisplay = () => {\n  const [{\n    history,\n    matches,\n    stats\n  }, dispatch] = useContext(StateContext);\n\n  const determineWordsPerMin = () => {\n    let wordCount = 1; // adds word for at each space typed in history\n    // TODO: MAKE THIS BETTER FOOL\n\n    for (let i = 0; i < history.length; i++) {\n      if (history[i] === \" \" && matches[i] === true) {\n        wordCount++;\n      }\n    }\n\n    return wordCount;\n  };\n\n  const determineAccuracy = () => {\n    const allTypedChars = matches.length;\n    const incorrectChars = matches.filter(a => a === false).length;\n    const correctChars = allTypedChars - incorrectChars;\n    const typingAccuracy = Math.round(correctChars / allTypedChars * 100);\n    return typingAccuracy;\n  };\n\n  const getStats = () => {\n    const wpm = determineWordsPerMin();\n    const accuracy = determineAccuracy();\n    dispatch({\n      type: \"setStats\",\n      setWPM: wpm,\n      setAccuracy: accuracy\n    });\n  };\n\n  useEffect(() => {\n    getStats();\n  }, []);\n  return React.createElement(React.Fragment, null, React.createElement(StyledStatsHeader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"Test Complete!\"), React.createElement(StyledStatsWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"Words Per Minute: \", stats.wpm), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"Accuracy: \", stats.accuracy + \"%\"), React.createElement(RestartButton, {\n    text: 'Try Again',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  })));\n};\n\nexport default StatsDisplay;","map":{"version":3,"sources":["/Users/ethanling/dev/ideations/reducer-typing-test/client/src/components/StatsDisplay.js"],"names":["React","useContext","useEffect","StateContext","StyledStatsWrapper","StyledStatsHeader","RestartButton","StatsDisplay","history","matches","stats","dispatch","determineWordsPerMin","wordCount","i","length","determineAccuracy","allTypedChars","incorrectChars","filter","a","correctChars","typingAccuracy","Math","round","getStats","wpm","accuracy","type","setWPM","setAccuracy"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,OAA7C;AACA,SAASC,YAAT,QAA6B,0BAA7B;AACA,SAASC,kBAAT,EAA6BC,iBAA7B,QAAsD,uBAAtD;AACA,OAAOC,aAAP,MAA0B,6BAA1B;;AAEA,MAAMC,YAAY,GAAG,MAAM;AACvB,QAAM,CAAC;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,OAAX;AAAoBC,IAAAA;AAApB,GAAD,EAA8BC,QAA9B,IAA0CV,UAAU,CAACE,YAAD,CAA1D;;AAEA,QAAMS,oBAAoB,GAAG,MAAM;AAC/B,QAAIC,SAAS,GAAG,CAAhB,CAD+B,CAE/B;AACA;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,OAAO,CAACO,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrC,UAAIN,OAAO,CAACM,CAAD,CAAP,KAAe,GAAf,IAAsBL,OAAO,CAACK,CAAD,CAAP,KAAe,IAAzC,EAA+C;AAC3CD,QAAAA,SAAS;AACZ;AACJ;;AAED,WAAOA,SAAP;AACH,GAXD;;AAaA,QAAMG,iBAAiB,GAAG,MAAM;AAC5B,UAAMC,aAAa,GAAGR,OAAO,CAACM,MAA9B;AACA,UAAMG,cAAc,GAAGT,OAAO,CAACU,MAAR,CAAeC,CAAC,IAAIA,CAAC,KAAK,KAA1B,EAAiCL,MAAxD;AACA,UAAMM,YAAY,GAAGJ,aAAa,GAAGC,cAArC;AACA,UAAMI,cAAc,GAAGC,IAAI,CAACC,KAAL,CAAYH,YAAY,GAAGJ,aAAhB,GAAiC,GAA5C,CAAvB;AAEA,WAAOK,cAAP;AACH,GAPD;;AASA,QAAMG,QAAQ,GAAG,MAAM;AACnB,UAAMC,GAAG,GAAGd,oBAAoB,EAAhC;AACA,UAAMe,QAAQ,GAAGX,iBAAiB,EAAlC;AAEAL,IAAAA,QAAQ,CAAC;AAAEiB,MAAAA,IAAI,EAAE,UAAR;AAAoBC,MAAAA,MAAM,EAAEH,GAA5B;AAAiCI,MAAAA,WAAW,EAAEH;AAA9C,KAAD,CAAR;AACH,GALD;;AAOAzB,EAAAA,SAAS,CAAC,MAAM;AACZuB,IAAAA,QAAQ;AACX,GAFQ,EAEN,EAFM,CAAT;AAIA,SACI,0CACI,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,EAEI,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAsBf,KAAK,CAACgB,GAA5B,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAchB,KAAK,CAACiB,QAAN,GAAiB,GAA/B,CAFJ,EAGI,oBAAC,aAAD;AAAe,IAAA,IAAI,EAAE,WAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CAFJ,CADJ;AAUH,CA9CD;;AAgDA,eAAepB,YAAf","sourcesContent":["import React, { useContext, useEffect } from \"react\";\nimport { StateContext } from \"../context/StateProvider\";\nimport { StyledStatsWrapper, StyledStatsHeader } from \"../styles/StyledStats\";\nimport RestartButton from '../components/RestartButton';\n\nconst StatsDisplay = () => {\n    const [{ history, matches, stats }, dispatch] = useContext(StateContext);\n\n    const determineWordsPerMin = () => {\n        let wordCount = 1;\n        // adds word for at each space typed in history\n        // TODO: MAKE THIS BETTER FOOL\n        for (let i = 0; i < history.length; i++) {\n            if (history[i] === \" \" && matches[i] === true) {\n                wordCount++;\n            }\n        }\n\n        return wordCount;\n    };\n\n    const determineAccuracy = () => {\n        const allTypedChars = matches.length;\n        const incorrectChars = matches.filter(a => a === false).length;\n        const correctChars = allTypedChars - incorrectChars;\n        const typingAccuracy = Math.round((correctChars / allTypedChars) * 100);\n\n        return typingAccuracy;\n    };\n\n    const getStats = () => {\n        const wpm = determineWordsPerMin();\n        const accuracy = determineAccuracy();\n\n        dispatch({ type: \"setStats\", setWPM: wpm, setAccuracy: accuracy });\n    };\n\n    useEffect(() => {\n        getStats();\n    }, []);\n\n    return (\n        <>\n            <StyledStatsHeader>Test Complete!</StyledStatsHeader>\n            <StyledStatsWrapper>\n                <p>Words Per Minute: {stats.wpm}</p>\n                <p>Accuracy: {stats.accuracy + \"%\"}</p>\n                <RestartButton text={'Try Again'} />\n            </StyledStatsWrapper>\n        </>\n    );\n};\n\nexport default StatsDisplay;\n"]},"metadata":{},"sourceType":"module"}
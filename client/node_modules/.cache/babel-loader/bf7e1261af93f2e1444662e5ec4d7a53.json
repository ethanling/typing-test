{"ast":null,"code":"var _jsxFileName = \"/Users/ethanling/dev/ideations/reducer-typing-test/client/src/components/Letter.js\";\nimport React, { useContext } from \"react\";\nimport { StateContext } from \"../context/StateProvider\";\nimport { StyledTestText, StyledLetter } from \"../styles/StyledTest\";\n\nconst Letter = () => {\n  const [{\n    test,\n    matches,\n    history\n  }] = useContext(StateContext);\n  const testTextArr = test.text.split(\"\");\n\n  const setLetterStyles = index => {\n    const letterStyles = {\n      backgroundColor: \"\",\n      opacity: \".6\",\n      borderLeft: \"3px solid #f1f1f1\"\n    };\n\n    if (matches[index] && index < matches.length) {\n      letterStyles.color = \"#81c970\";\n      letterStyles.opacity = '1';\n      letterStyles.color = '#423c3c';\n    } else if (!matches[index] && index < matches.length) {\n      letterStyles.color = \"#e2615f\";\n    } else {\n      letterStyles.backgroundColor = \"\";\n    } // Determines cursor position\n\n\n    if (history.length === index) {\n      letterStyles.borderLeft = \"3px solid #000\";\n    }\n\n    return letterStyles;\n  };\n\n  return React.createElement(StyledTestText, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, testTextArr.map((letter, i) => React.createElement(StyledLetter, {\n    key: i,\n    style: setLetterStyles(i),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, letter)));\n};\n\nexport default Letter;","map":{"version":3,"sources":["/Users/ethanling/dev/ideations/reducer-typing-test/client/src/components/Letter.js"],"names":["React","useContext","StateContext","StyledTestText","StyledLetter","Letter","test","matches","history","testTextArr","text","split","setLetterStyles","index","letterStyles","backgroundColor","opacity","borderLeft","length","color","map","letter","i"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,YAAT,QAA6B,0BAA7B;AACA,SAASC,cAAT,EAAyBC,YAAzB,QAA6C,sBAA7C;;AAEA,MAAMC,MAAM,GAAG,MAAM;AACjB,QAAM,CAAC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,GAAD,IAA8BP,UAAU,CAACC,YAAD,CAA9C;AAEA,QAAMO,WAAW,GAAGH,IAAI,CAACI,IAAL,CAAUC,KAAV,CAAgB,EAAhB,CAApB;;AAEA,QAAMC,eAAe,GAAIC,KAAD,IAAW;AAE/B,UAAMC,YAAY,GAAG;AACjBC,MAAAA,eAAe,EAAE,EADA;AAEjBC,MAAAA,OAAO,EAAE,IAFQ;AAGjBC,MAAAA,UAAU,EAAE;AAHK,KAArB;;AAMA,QAAIV,OAAO,CAACM,KAAD,CAAP,IAAkBA,KAAK,GAAGN,OAAO,CAACW,MAAtC,EAA8C;AAC1CJ,MAAAA,YAAY,CAACK,KAAb,GAAoB,SAApB;AACTL,MAAAA,YAAY,CAACE,OAAb,GAAuB,GAAvB;AACAF,MAAAA,YAAY,CAACK,KAAb,GAAqB,SAArB;AACM,KAJD,MAIO,IAAI,CAACZ,OAAO,CAACM,KAAD,CAAR,IAAmBA,KAAK,GAAGN,OAAO,CAACW,MAAvC,EAA+C;AAClDJ,MAAAA,YAAY,CAACK,KAAb,GAAoB,SAApB;AACH,KAFM,MAEA;AACHL,MAAAA,YAAY,CAACC,eAAb,GAA+B,EAA/B;AACH,KAhB8B,CAiB/B;;;AACA,QAAIP,OAAO,CAACU,MAAR,KAAmBL,KAAvB,EAA8B;AAC1BC,MAAAA,YAAY,CAACG,UAAb,GAA0B,gBAA1B;AACH;;AAED,WAAOH,YAAP;AACH,GAvBD;;AAyBA,SACI,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKL,WAAW,CAACW,GAAZ,CAAgB,CAACC,MAAD,EAASC,CAAT,KACb,oBAAC,YAAD;AAAc,IAAA,GAAG,EAAEA,CAAnB;AAAsB,IAAA,KAAK,EAAEV,eAAe,CAACU,CAAD,CAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKD,MADL,CADH,CADL,CADJ;AASH,CAvCD;;AAyCA,eAAehB,MAAf","sourcesContent":["import React, { useContext } from \"react\";\nimport { StateContext } from \"../context/StateProvider\";\nimport { StyledTestText, StyledLetter } from \"../styles/StyledTest\";\n\nconst Letter = () => {\n    const [{ test, matches, history}] = useContext(StateContext);\n\n    const testTextArr = test.text.split(\"\");\n\n    const setLetterStyles = (index) => {\n\n        const letterStyles = {\n            backgroundColor: \"\",\n            opacity: \".6\",\n            borderLeft: \"3px solid #f1f1f1\",\n        };\n\n        if (matches[index] && index < matches.length) {\n            letterStyles.color= \"#81c970\";\n\t\t\tletterStyles.opacity = '1';\n\t\t\tletterStyles.color = '#423c3c'\n        } else if (!matches[index] && index < matches.length) {\n            letterStyles.color= \"#e2615f\";\n        } else {\n            letterStyles.backgroundColor = \"\";\n        }\n        // Determines cursor position\n        if (history.length === index) {\n            letterStyles.borderLeft = \"3px solid #000\";\n        }\n\n        return letterStyles;\n    };\n\n    return (\n        <StyledTestText>\n            {testTextArr.map((letter, i) => (\n                <StyledLetter key={i} style={setLetterStyles(i)}>\n                    {letter}\n                </StyledLetter>\n            ))}\n        </StyledTestText>\n    );\n};\n\nexport default Letter;\n"]},"metadata":{},"sourceType":"module"}
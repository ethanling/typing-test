{"ast":null,"code":"var _jsxFileName = \"/Users/ethanling/Dev/ideations/reducer-typing-test/src/components/TestPicker.js\";\nimport React, { useContext } from 'react';\nimport { allTests } from '../allTests';\nimport { StateContext } from \"../context/StateProvider\";\nimport { StyledTestContainer } from \"../styles/StyledTest\";\nimport { StyledSelect } from \"../styles/StyledForm\";\n\nconst TestPicker = () => {\n  const [, dispatch] = useContext(StateContext);\n\n  const handleChange = event => {\n    if (event.target.value) {\n      // matches selection to test of same name\n      const selectedTest = allTests.filter(a => a.test.name === event.target.value); // Filter returns array, so convert to object\n\n      dispatch({\n        type: 'setTest',\n        testObj: selectedTest[0].test\n      });\n    }\n  }; // TODO:\n  // Add multiple categories to select from beyond just topic\n  // change displayed results with filter method\n\n\n  return React.createElement(StyledTestContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, \"Pick Test:\", React.createElement(StyledSelect, {\n    name: \"Choose Topic\",\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, \"Choose Topic\"), allTests.map((a, i) => React.createElement(\"option\", {\n    key: i,\n    value: a.test.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, a.test.name))));\n};\n\nexport default TestPicker;","map":{"version":3,"sources":["/Users/ethanling/Dev/ideations/reducer-typing-test/src/components/TestPicker.js"],"names":["React","useContext","allTests","StateContext","StyledTestContainer","StyledSelect","TestPicker","dispatch","handleChange","event","target","value","selectedTest","filter","a","test","name","type","testObj","map","i"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,YAAT,QAA6B,0BAA7B;AACA,SAASC,mBAAT,QAAoC,sBAApC;AACA,SAASC,YAAT,QAA6B,sBAA7B;;AAEA,MAAMC,UAAU,GAAG,MAAM;AACrB,QAAM,GAAGC,QAAH,IAAeN,UAAU,CAACE,YAAD,CAA/B;;AAEA,QAAMK,YAAY,GAAIC,KAAD,IAAW;AAC5B,QAAIA,KAAK,CAACC,MAAN,CAAaC,KAAjB,EAAwB;AACpB;AACA,YAAMC,YAAY,GAAGV,QAAQ,CAACW,MAAT,CAAgBC,CAAC,IAAIA,CAAC,CAACC,IAAF,CAAOC,IAAP,KAAgBP,KAAK,CAACC,MAAN,CAAaC,KAAlD,CAArB,CAFoB,CAGpB;;AACAJ,MAAAA,QAAQ,CAAC;AAAEU,QAAAA,IAAI,EAAE,SAAR;AAAmBC,QAAAA,OAAO,EAAEN,YAAY,CAAC,CAAD,CAAZ,CAAgBG;AAA5C,OAAD,CAAR;AACH;AACJ,GAPD,CAHqB,CAYrB;AACA;AACA;;;AAEA,SACI,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEI,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAE,cAApB;AAAoC,IAAA,QAAQ,EAAEP,YAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAQ,IAAA,KAAK,EAAC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,EAEKN,QAAQ,CAACiB,GAAT,CAAa,CAACL,CAAD,EAAIM,CAAJ,KACV;AAAQ,IAAA,GAAG,EAAEA,CAAb;AAAgB,IAAA,KAAK,EAAEN,CAAC,CAACC,IAAF,CAAOC,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAqCF,CAAC,CAACC,IAAF,CAAOC,IAA5C,CADH,CAFL,CAFJ,CADJ;AAWH,CA3BD;;AA6BA,eAAeV,UAAf","sourcesContent":["import React, { useContext } from 'react';\nimport { allTests } from '../allTests';\nimport { StateContext } from \"../context/StateProvider\";\nimport { StyledTestContainer } from \"../styles/StyledTest\";\nimport { StyledSelect } from \"../styles/StyledForm\";\n\nconst TestPicker = () => {\n    const [, dispatch] = useContext(StateContext);\n\n    const handleChange = (event) => {\n        if (event.target.value) {\n            // matches selection to test of same name\n            const selectedTest = allTests.filter(a => a.test.name === event.target.value);\n            // Filter returns array, so convert to object\n            dispatch({ type: 'setTest', testObj: selectedTest[0].test });\n        }\n    }\n\n    // TODO:\n    // Add multiple categories to select from beyond just topic\n    // change displayed results with filter method\n\n    return (\n        <StyledTestContainer>\n            Pick Test:\n            <StyledSelect name={\"Choose Topic\"} onChange={handleChange}>\n                <option value=\"\">Choose Topic</option>\n                {allTests.map((a, i) => (\n                    <option key={i} value={a.test.name}>{a.test.name}</option>\n                ))}\n            </StyledSelect>\n        </StyledTestContainer>\n    );\n}\n\nexport default TestPicker;"]},"metadata":{},"sourceType":"module"}
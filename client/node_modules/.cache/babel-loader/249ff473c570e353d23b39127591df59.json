{"ast":null,"code":"var _jsxFileName = \"/Users/ethanling/dev/ideations/reducer-typing-test/client/src/components/TestDisplay.js\";\nimport React, { useContext, useEffect } from 'react';\nimport { StateContext } from '../context/StateProvider';\nimport { useKeyboard } from '../hooks/useKeyboard';\nimport Letter from './Letter';\nimport { StyledTestDisplay } from '../styles/StyledTest';\n\nconst Test = () => {\n  const [{\n    test,\n    history,\n    isStarted\n  }, dispatch] = useContext(StateContext);\n  const currentKey = useKeyboard();\n\n  const updateCurrentKey = () => {\n    dispatch({\n      type: 'setCurrentKey',\n      newKey: currentKey\n    });\n    updateHistory(currentKey);\n    startTest();\n  };\n\n  const matchKeysToTest = () => {\n    if (currentKey && currentKey === test.text[history.length]) {\n      dispatch({\n        type: \"setMatch\",\n        setMatchBool: true\n      });\n    } else {\n      dispatch({\n        type: \"setMatch\",\n        setMatchBool: false\n      });\n    }\n  };\n\n  const updateHistory = key => {\n    if (key) {\n      if (key !== 'Backspace') {\n        dispatch({\n          type: 'addToHistory',\n          setHistory: key\n        });\n        matchKeysToTest();\n      } else {\n        dispatch({\n          type: 'removeLastKey'\n        });\n        dispatch({\n          type: \"removeMatch\"\n        });\n      }\n    }\n  };\n\n  const startTest = () => {\n    if (currentKey && !isStarted) {\n      dispatch({\n        type: 'startEndTest',\n        setStartState: true\n      });\n    }\n  };\n\n  useEffect(() => {\n    updateCurrentKey();\n  }, [currentKey]);\n  return React.createElement(StyledTestDisplay, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(Letter, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }));\n};\n\nexport default Test;","map":{"version":3,"sources":["/Users/ethanling/dev/ideations/reducer-typing-test/client/src/components/TestDisplay.js"],"names":["React","useContext","useEffect","StateContext","useKeyboard","Letter","StyledTestDisplay","Test","test","history","isStarted","dispatch","currentKey","updateCurrentKey","type","newKey","updateHistory","startTest","matchKeysToTest","text","length","setMatchBool","key","setHistory","setStartState"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,OAA7C;AACA,SAASC,YAAT,QAA6B,0BAA7B;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,iBAAT,QAAkC,sBAAlC;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACf,QAAM,CAAC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,GAAD,EAA+BC,QAA/B,IAA2CV,UAAU,CAACE,YAAD,CAA3D;AAEA,QAAMS,UAAU,GAAGR,WAAW,EAA9B;;AAEA,QAAMS,gBAAgB,GAAG,MAAM;AAC3BF,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAE,eAAR;AAAyBC,MAAAA,MAAM,EAAEH;AAAjC,KAAD,CAAR;AACAI,IAAAA,aAAa,CAACJ,UAAD,CAAb;AACAK,IAAAA,SAAS;AACZ,GAJD;;AAMA,QAAMC,eAAe,GAAG,MAAM;AAC1B,QAAIN,UAAU,IAAIA,UAAU,KAAKJ,IAAI,CAACW,IAAL,CAAUV,OAAO,CAACW,MAAlB,CAAjC,EAA4D;AACxDT,MAAAA,QAAQ,CAAC;AAAEG,QAAAA,IAAI,EAAE,UAAR;AAAoBO,QAAAA,YAAY,EAAE;AAAlC,OAAD,CAAR;AACH,KAFD,MAEO;AACHV,MAAAA,QAAQ,CAAC;AAAEG,QAAAA,IAAI,EAAE,UAAR;AAAoBO,QAAAA,YAAY,EAAE;AAAlC,OAAD,CAAR;AACH;AACJ,GAND;;AAQA,QAAML,aAAa,GAAIM,GAAD,IAAS;AAC3B,QAAIA,GAAJ,EAAS;AACL,UAAIA,GAAG,KAAK,WAAZ,EAAyB;AACrBX,QAAAA,QAAQ,CAAC;AAAEG,UAAAA,IAAI,EAAE,cAAR;AAAwBS,UAAAA,UAAU,EAAED;AAApC,SAAD,CAAR;AACAJ,QAAAA,eAAe;AAClB,OAHD,MAGO;AACHP,QAAAA,QAAQ,CAAC;AAAEG,UAAAA,IAAI,EAAE;AAAR,SAAD,CAAR;AACAH,QAAAA,QAAQ,CAAC;AAAEG,UAAAA,IAAI,EAAE;AAAR,SAAD,CAAR;AACH;AACJ;AACJ,GAVD;;AAYA,QAAMG,SAAS,GAAG,MAAM;AACpB,QAAIL,UAAU,IAAI,CAACF,SAAnB,EAA8B;AAC1BC,MAAAA,QAAQ,CAAC;AAAEG,QAAAA,IAAI,EAAE,cAAR;AAAwBU,QAAAA,aAAa,EAAE;AAAvC,OAAD,CAAR;AACH;AACJ,GAJD;;AAMAtB,EAAAA,SAAS,CAAC,MAAM;AACZW,IAAAA,gBAAgB;AACnB,GAFQ,EAEN,CAACD,UAAD,CAFM,CAAT;AAIA,SACI,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAKH,CA9CD;;AAgDA,eAAeL,IAAf","sourcesContent":["import React, { useContext, useEffect } from 'react';\nimport { StateContext } from '../context/StateProvider';\nimport { useKeyboard } from '../hooks/useKeyboard';\nimport Letter from './Letter';\nimport { StyledTestDisplay } from '../styles/StyledTest';\n\nconst Test = () => {\n    const [{ test, history, isStarted }, dispatch] = useContext(StateContext);\n\n    const currentKey = useKeyboard();\n    \n    const updateCurrentKey = () => {\n        dispatch({ type: 'setCurrentKey', newKey: currentKey })\n        updateHistory(currentKey);\n        startTest();\n    }\n\n    const matchKeysToTest = () => {\n        if (currentKey && currentKey === test.text[history.length]) {\n            dispatch({ type: \"setMatch\", setMatchBool: true });\n        } else {\n            dispatch({ type: \"setMatch\", setMatchBool: false });\n        }\n    };\n\n    const updateHistory = (key) => {\n        if (key) {\n            if (key !== 'Backspace') {\n                dispatch({ type: 'addToHistory', setHistory: key});\n                matchKeysToTest();\n            } else {\n                dispatch({ type: 'removeLastKey'});\n                dispatch({ type: \"removeMatch\" });\n            }\n        }\n    }\n\n    const startTest = () => {\n        if (currentKey && !isStarted) {\n            dispatch({ type: 'startEndTest', setStartState: true })\n        }\n    }\n\n    useEffect(() => {\n        updateCurrentKey();\n    }, [currentKey])\n\n    return (\n        <StyledTestDisplay>\n            <Letter />\n        </StyledTestDisplay>\n    );\n}\n\nexport default Test;"]},"metadata":{},"sourceType":"module"}